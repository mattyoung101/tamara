@Article{Shah2019,
  author        = {David Shah and Eddie Hung and Clifford Wolf and Serge Bazanski and Dan Gisselquist and Miodrag Milanovic},
  journal       = {CoRR},
  title         = {Yosys+nextpnr: an Open Source Framework from Verilog to Bitstream for Commercial FPGAs},
  year          = {2019},
  volume        = {abs/1903.10407},
  archiveprefix = {arXiv},
  bibsource     = {dblp computer science bibliography, https://dblp.org},
  biburl        = {https://dblp.org/rec/journals/corr/abs-1903-10407.bib},
  eprint        = {1903.10407},
  file          = {:/home/matt/Dropbox/Digital Library/Papers/Computer Engineering/EDA/1903.10407v1.pdf:PDF},
  timestamp     = {Mon, 01 Apr 2019 14:07:37 +0200},
  url           = {http://arxiv.org/abs/1903.10407},
}

@TechReport{Ajayi2019,
  author   = {Ajayi, Tutu and Blaauw, David and Chan, Tuck-Boon and Cheng, Chung-Kuan and Chhabria, Vidya and Choo, Kyojin and Coltella, Matteo and Dobre, Sorin and Dreslinski, Ronald and Fogac, Mateus and Hashemi, Soheil and Hosny, Abdelrahman and Kahng, Andrew and Kim, Minsoo and Li, Jiajia and Liang, Zhaoxin and Mallappa, Uday and Penzes, Paul and Pradipta, Geraldo and Reda, Sherief and Rovinski, Austin and Samadi, Kambiz and Sapatnekar, Sachin and Saul, Lawrence and Sechen, Carl and Srinivas, Vaishnav and Swartz, William and Sylvester, Dennis and Urquhart, David and Wang, Lutong and Woo, Mingyu and Xu, Bangqi and Diego, Uc and Qualcomm and Arm},
  title    = {OpenROAD: Toward a Self-Driving, Open-Source Digital Layout Implementation Tool Chain},
  year     = {2019},
  number   = {specific},
  abstract = {We describe the scope and initial efforts of Open-ROAD, a project in the DARPA IDEA program that pursues open-source tools for 24-hour, "no human in the loop" digital layout generation across integrated circuit, package and board domains. If successful, OpenROAD will help realize the IDEA goal of "democratization of hardware design", by reducing cost, expertise, schedule and risk barriers that confront system designers today. Several novel technical directions follow directly from the IDEA program's 24-hour, no-humans goals. These include (i) enablement of pervasive machine learning in and around design tools and flows, (ii) parallel search and optimization to exploit available cloud resources, (iii) partitioning and problem decomposition to reduce solution latency, and (iv) layout generation methodologies that provide "freedoms from choice" without undue loss of design quality. Further, the development of open-source, self-driving design tools is in and of itself a "moon shot" with numerous technical and cultural challenges.},
  file     = {:/home/matt/Dropbox/Digital Library/Papers/Computer Engineering/EDA/openroad.pdf:PDF},
  url      = {https://vlsicad.ucsd.edu/Publications/Conferences/370/c370.pdf},
}

@Misc{Engelhardt2024,
  author       = {N. Engelhardt},
  howpublished = {Personal communication},
  month        = may,
  year         = {2024},
}

@TechReport{Bradner1997,
  author      = {Scott Bradner},
  institution = {Internet Engineering Task Force},
  title       = {Key words for use in RFCs to Indicate Requirement Levels},
  year        = {1997},
  month       = mar,
  type        = {techreport},
  url         = {https://www.ietf.org/rfc/rfc2119.txt},
}

@Article{Lyons1962,
  author   = {Lyons, R and Vanderkul, W},
  journal  = {IBM Journal of Research and Development},
  title    = {The Use of Triple-Modular Redundancy to Improve Computer Reliability},
  year     = {1962},
  pages    = {200-209},
  volume   = {6},
  abstract = {One of the proposed techniques for meeting the severe reliability requirements inherent in certain future computer applications i s described. This technique involves the use of triple-modular redundancy, which is essentially the use of the two-out-of-three voting concept a t a low level. Effects of imperfect votingcircuitryand ofvarious interconnectionsof logical elementsareassessed. A hypothetical triple-modular redundant computer is subjected t o a Monte Carlo program on the IBM 704, which simulates component failures. Reliability is thereby determined and compared with reliability obtained by analytical calculations based on simplifying assumptions.},
  file     = {:/home/matt/Dropbox/Digital Library/Papers/Computer Engineering/Fault-Tolerance/TMR/The Use of Triple-Modular Redundancy.pdf:PDF},
}

@Misc{OBryan2021,
  author    = {Martha O'Bryan},
  month     = oct,
  title     = {Single Event Effects},
  year      = {2021},
  timestamp = {2024-07-29},
  url       = {https://radhome.gsfc.nasa.gov/radhome/see.htm},
  urldate   = {2024-07-29}
}

@InProceedings{Wolf2013,
  author    = {Wolf, Clifford and Glaser, Johann},
  booktitle = {Proceedings of Austrochip 2013},
  title     = {Yosys - A Free Verilog Synthesis Suite},
  year      = {2013},
  number    = {in-},
  abstract  = {Most of todays digital design work is done using hardware description languages such as Verilog HDL or VHDL. HDL synthesis is used to translate that HDL code to digital circuits. Yosys is the first free and open source software for Verilog HDL synthesis which supports the vast majority of synthesizable Verilog features. Yosys is built as an extensible framework so it can be used easily as basis for custom synthesis flows and as environment for the implementation and research on new synthesis algorithms. Yosys has special emphasis on support for coarsegrain logic, making it ideal for algorithms such as logic mapping to DSP cells in FPGAs or synthesis for custom coarse-grain reconfigurable hardware. Yosys has mature support for Verilog HDL and is able to synthesize complex real-world Verilog designs. Example design flows for fine-grain and coarse-grain architectures are presented and discussed. The availability of Yosys under a liberal open source license can greatly improve reproducibility of scientific publications, when Yosys is used as basis for reference implementations of new algorithms instead of closed-source alternatives.},
  file      = {:/home/matt/Dropbox/Digital Library/Papers/Computer Engineering/EDA/yosys-austrochip2013.pdf:PDF},
  type      = {techreport},
}

@InProceedings{Johnson2010,
  author     = {Johnson, Jonathan M. and Wirthlin, Michael J.},
  booktitle  = {Proceedings of the 18th annual ACM/SIGDA international symposium on Field programmable gate arrays},
  title      = {Voter insertion algorithms for FPGA designs using triple modular redundancy},
  year       = {2010},
  month      = feb,
  publisher  = {ACM},
  series     = {FPGA ’10},
  abstract   = {Triple Modular Redundancy (TMR) is a common reliability technique for mitigating single event upsets (SEUs) in FPGA designs operating in radiation environments. For FPGA systems that employ configuration scrubbing, majority voters are needed in all feedback paths to ensure proper synchronization between the TMR replicates. Synchronization voters, however, consume additional resources and impact system timing. This paper will introduce and contrast four algorithms for inserting synchronization voters while automatically performing TMR. The area cost and timing impact of each algorithm on a number of circuit benchmarks will be reported. This paper will demonstrate that one of the algorithms provides the best overall timing performance results with an average 9.8% increase in critical path length over a triplicated design without voters. Another algorithm provides far better area results at a slightly higher timing cost (an average 2.1% area increase over a triplicated design without voters).},
  collection = {FPGA ’10},
  doi        = {10.1145/1723112.1723154},
  file       = {:/home/matt/Dropbox/Digital Library/Papers/Computer Engineering/Fault-Tolerance/TMR/Voter Insertion Algorithms for FPGA Designs Using TMR.pdf:PDF},
  keywords   = {B.8.1 [Performance and Reliability]: Reliability, Testing, and Fault-Tolerance Reliability, Design, Algorithms},
}

@MastersThesis{Johnson2010a,
  author = {Johnson, Jonathan and Mark, Jonathan and Wirthlin, Michael and Hutchings, Brad and Nelson, Brent},
  school = {Brigham Young University - Provo},
  title  = {Synchronization Voter Insertion Algorithms for FPGA Designs Using Triple Modular Redundancy},
  year   = {2010},
  month  = {4},
  type   = {mathesis},
  date   = {2010-04},
  file   = {:/home/matt/Dropbox/Digital Library/Papers/Computer Engineering/Fault-Tolerance/TMR/Synchronization Voter Insertion Algorithms for FPGA Designs Using.pdf:PDF},
}

@InProceedings{Skouson2020,
  author    = {{D}allin {S}kouson and {A}ndrew {K}eller and {M}ichael {W}irthlin},
  booktitle = {{P}roceedings of the 19th {P}ython in {S}cience {C}onference},
  title     = {{N}etlist {A}nalysis and {T}ransformations {U}sing {S}py{D}r{N}et},
  year      = {2020},
  editor    = {{M}eghann {A}garwal and {C}hris {C}alloway and {D}illon {N}iederhut and {D}avid {S}hupe},
  pages     = {40 - 47},
  doi       = {10.25080/Majora-342d178e-006},
}

@Comment{jabref-meta: databaseType:bibtex;}
