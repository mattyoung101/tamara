# vi: ft=bash
# This uses Yosys' miter circuit functionality and built-in SAT solver, plus some design trickery to prove
# equivalence
plugin -i libtamara.so

# gate (design under test)
read_verilog -sv {script}
prep -top {top}
# delete error signal (https://github.com/mattyoung101/tamara/issues/47#issuecomment-2845210247)
delete a:tamara_error_sink
tamara_tmr
{tamara_again_if_multi_tmr}
rename {top} gate

# fault injection
# apply a random mutation (fault injection)
mutate -list {faults} -seed {seed} -o {mutate_script}
# execute the fault injection command
script {mutate_script}
write_rtlil
# we have to stash this design, because "prep" will remove the other module otherwise when it runs "opt_clean"
design -stash stash

# gold (reference model)
read_verilog -sv {script}
prep -top {top}
# delete error signal
delete a:tamara_error_sink
rename {top} gold
write_rtlil

# merge designs
# we copy the current design into the stash
design -copy-to stash
# and now we load the stash, replacing the current design
design -load stash
write_rtlil

# miter and prove
miter -equiv -make_assert -make_outputs gold gate miter
flatten miter
write_rtlil
select miter
sat -verify -tempinduct -set-init-undef -set-def-formal -set-def-inputs -maxsteps 15 -set-assumes -prove-asserts
