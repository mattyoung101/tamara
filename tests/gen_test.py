#!/usr/bin/env python3
# TaMaRa: An automated triple modular redundancy EDA flow for Yosys.
#
# Copyright (c) 2025 Matt Young.
#
# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL
# was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
import argparse

"""
Generates a various test scripts from a SystemVerilog file.
"""

SCRIPT_TEMPLATE = """# Automatically generated by gen_test.py for:
# Verilog file: {verilog_file}
# Top module: {top_module}

plugin -i libtamara.so

read_verilog -sv ../tests/verilog/{verilog_file}
hierarchy -top {top_module}

prep
splitcells
splitnets
write_rtlil

tamara_tmr
check
write_rtlil
write_verilog
show -colors 420
"""

EQUIVALENCE_TEMPLATE = """# Automatically generated by gen_test.py for:
# Verilog file {verilog_file}
# Top module: {top_module}

[gold]
read_verilog -sv ../tests/verilog/{verilog_file}
prep -top {top_module}
rename -top design
splitcells
splitnets

[gate]
plugin -i libtamara.so
read_verilog -DTAMARA -sv ../tests/verilog/{verilog_file}
prep -top {top_module}
rename -top design
splitcells
splitnets
tamara_tmr

[strategy sby]
use sby
depth 2
engine smtbmc yices
"""


def script(verilog_file: str, top_module: str):
    with open(f"scripts/{top_module}.ys", "w") as f:
        print(SCRIPT_TEMPLATE.format(verilog_file=verilog_file, top_module=top_module), file=f)
        print(f"OK. Written to scripts/{top_module}.ys")


def equivalence(verilog_file: str, top_module: str):
    with open(f"formal/equivalence/{top_module}.eqy", "w") as f:
        print(EQUIVALENCE_TEMPLATE.format(verilog_file=verilog_file, top_module=top_module), file=f)
        print(f"OK. Written to formal/equivalence/{top_module}.eqy")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("case", help="Type of the test to generate [script|equivalence]")
    parser.add_argument("verilog_file", help="Name of Verilog file in `verilog` dir, e.g. file.v")
    parser.add_argument("top_module", help="Name of top module in Verilog file, e.g. not_2bit")
    args = parser.parse_args()

    if args.case == "script":
        print("Generating script test")
        script(args.verilog_file, args.top_module)
    elif args.case == "equivalence":
        print("Generating formal equivalence check")
        equivalence(args.verilog_file, args.top_module)
    else:
        raise Exception(f"Unrecognised case: {args.case}")
